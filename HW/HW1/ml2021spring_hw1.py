# -*- coding: utf-8 -*-
"""ML2021Spring - HW1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k7ohyMe3PeiuswOmxWAIaxO-HW64BY2v

# **Homework 1: COVID-19 Cases Prediction (Regression)**

Author: Heng-Jui Chang

Slides: https://github.com/ga642381/ML2021-Spring/blob/main/HW01/HW01.pdf  
Video: TBA

Objectives:
* Solve a regression problem with deep neural networks (DNN).
* Understand basic DNN training tips.
* Get familiar with PyTorch.

If any questions, please contact the TAs via TA hours, NTU COOL, or email.

# **Download Data**


If the Google drive links are dead, you can download data from [kaggle](https://www.kaggle.com/c/ml2021spring-hw1/data), and upload data manually to the workspace.
"""

tr_path = 'covid.train.csv'  # path to training data
tt_path = 'covid.test.csv'   # path to testing data

!gdown --id '19CCyCgJrUxtvgZF53vnctJiOJ23T5mqF' --output covid.train.csv
!gdown --id '1CE240jLm2npU-tdz81-oVKEF3T2yfT1O' --output covid.test.csv

"""# **Import Some Packages**"""

# PyTorch
import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader

# For data preprocess
import numpy as np
import csv
import os

# For plotting
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure

myseed = 42069  # set a random seed for reproducibility
torch.backends.cudnn.deterministic = True
torch.backends.cudnn.benchmark = False
np.random.seed(myseed)
torch.manual_seed(myseed)
if torch.cuda.is_available():
    torch.cuda.manual_seed_all(myseed)

"""# **Some Utilities**

You do not need to modify this part.
"""

def get_device():
    ''' Get device (if GPU is available, use GPU) '''
    return 'cuda' if torch.cuda.is_available() else 'cpu'

def plot_learning_curve_avg(total_loss_record, title=''):
    ''' Plot learning curve of your DNN (train & dev loss) '''
    total_steps = len(total_loss_record[0]['train'])
    x_1 = range(total_steps)
    x_2 = x_1[::len(total_loss_record[0]['train']) // len(total_loss_record[0]['dev'])]
    figure(figsize=(6, 4))
    loss_record_train = 0
    loss_record_dev = 0
    for i in range(10):
        loss_record_train += np.array(total_loss_record[i]['train'])
        loss_record_dev += np.array(total_loss_record[i]['dev'])
    loss_record_train /= 10
    loss_record_dev /= 10
    plt.plot(x_1, list(loss_record_train), c='tab:red', label='train')
    plt.plot(x_2, list(loss_record_dev), c='tab:cyan', label='dev')
    plt.ylim(0.0, 5.)
    plt.xlabel('Training steps')
    plt.ylabel('MSE loss')
    plt.title('Learning curve of {}'.format(title))
    plt.legend()
    plt.show()

def plot_learning_curve_final(loss_record, title=''):
    ''' Plot learning curve of your DNN (train & dev loss) '''
    total_steps = len(loss_record['final'])
    x_1 = range(total_steps)
    figure(figsize=(6, 4))
    plt.plot(x_1, loss_record['final'], c='tab:red', label='train')
    plt.ylim(0.0, 5.)
    plt.xlabel('Training steps')
    plt.ylabel('MSE loss')
    plt.title('Learning curve of {}'.format(title))
    plt.legend()
    plt.show()


def plot_pred(dv_set, model, device, lim=35., preds=None, targets=None):
    ''' Plot prediction of your DNN '''
    if preds is None or targets is None:
        model.eval()
        preds, targets = [], []
        for x, y in dv_set:
            x, y = x.to(device), y.to(device)
            with torch.no_grad():
                pred = model(x)
                preds.append(pred.detach().cpu())
                targets.append(y.detach().cpu())
        preds = torch.cat(preds, dim=0).numpy()
        targets = torch.cat(targets, dim=0).numpy()

    figure(figsize=(5, 5))
    plt.scatter(targets, preds, c='r', alpha=0.5)
    plt.plot([-0.2, lim], [-0.2, lim], c='b')
    plt.xlim(-0.2, lim)
    plt.ylim(-0.2, lim)
    plt.xlabel('ground truth value')
    plt.ylabel('predicted value')
    plt.title('Ground Truth v.s. Prediction')
    plt.show()

"""# **Preprocess**

We have three kinds of datasets:
* `train`: for training
* `dev`: for validation
* `test`: for testing (w/o target value)

## **Dataset**

The `COVID19Dataset` below does:
* read `.csv` files
* extract features
* split `covid.train.csv` into train/dev sets
* normalize features

Finishing `TODO` below might make you pass medium baseline.
"""

class COVID19Dataset(Dataset):
    ''' Dataset for loading and preprocessing the COVID19 dataset '''
    def __init__(self,
                 path,
                 fold,
                 mean, std,
                 mode='train',
                 target_only=False):
        self.mode = mode

        # Read data into numpy arrays
        with open(path, 'r') as fp:
            data = list(csv.reader(fp))
            data = np.array(data[1:])[:, 1:].astype(float)
        feats = None
        if not target_only:
            feats = list(range(93))
        else:
            # TODO: Using 40 states & 2 tested_positive features (indices = 57 & 75)
            feats = list(range(40))

            # feats.extend([57, 75])

            feats.extend([i for i in range(40, 44)])
            feats += [57]
            feats.extend([i for i in range(58, 62)])
            feats += [75]
            feats.extend([i for i in range(76, 80)])

            # feats.extend([i for i in range(40, 52)])
            # feats += [57]
            # feats.extend([i for i in range(58, 70)])
            # feats += [75]
            # feats.extend([i for i in range(76, 88)])

        if mode == 'test':
            # Testing data
            # data: 893 x 93 (40 states + day 1 (18) + day 2 (18) + day 3 (17))
            data = data[:, feats]
            self.data = torch.FloatTensor(data)
        else:
            # Training data (train/dev sets)
            # data: 2700 x 94 (40 states + day 1 (18) + day 2 (18) + day 3 (18))
            target = data[:, -1]
            data = data[:, feats]
            
            indices = None
            # Splitting training data into train & dev sets
            if mode == 'train':
                indices = [i for i in range(len(data)) if i % 10 != fold]
            elif mode == 'dev':
                indices = [i for i in range(len(data)) if i % 10 == fold]
            elif mode == 'final': # For test set, get all data to normalize it.
                indices = [i for i in range(len(data))]
            # Convert data into PyTorch tensors
            self.data = torch.FloatTensor(data[indices])
            self.target = torch.FloatTensor(target[indices])
        
        # Normalize features (you may remove this part to see what will happen)
        # self.data[:, 40:] = \
        #     (self.data[:, 40:] - self.data[:, 40:].mean(dim=0, keepdim=True)) \
        #     / self.data[:, 40:].std(dim=0, keepdim=True)
        if mode == 'train' or mode == 'final':
            self.mean =  self.data[:, 40:].mean(dim=0, keepdim=True)
            self.std = self.data[:, 40:].std(dim=0, keepdim=True)
        else:
            self.mean = mean
            self.std = std
        # print(mode, self.mean, self.std)
        self.data[:, 40:] = \
            (self.data[:, 40:] - self.mean) \
            / self.std
        self.dim = self.data.shape[1]

        print('Finished reading the {} set of COVID19 Dataset ({} samples found, each dim = {})'
              .format(mode, len(self.data), self.dim))
    
    def getNormalizer(self):
        return self.mean, self.std

    def __getitem__(self, index):
        # Returns one sample at a time
        if self.mode in ['train', 'dev', 'final']:
            # For training
            return self.data[index], self.target[index]
        else:
            # For testing (no target)
            return self.data[index]

    def __len__(self):
        # Returns the size of the dataset
        return len(self.data)

"""## **DataLoader**

A `DataLoader` loads data from a given `Dataset` into batches.

"""

def prep_dataloader(path, fold, mean, std, mode, batch_size, n_jobs=0, target_only=False):
    ''' Generates a dataset, then is put into a dataloader. '''
    dataset = COVID19Dataset(path, fold, mean, std, mode, target_only=target_only)  # Construct dataset
    mean, std = dataset.getNormalizer()
    dataloader = DataLoader(
        dataset, batch_size,
        shuffle=(mode == 'train' or mode == 'final'), drop_last=False,
        num_workers=n_jobs, pin_memory=True)                            # Construct dataloader
    return dataloader, mean, std

"""# **Deep Neural Network**

`NeuralNet` is an `nn.Module` designed for regression.
The DNN consists of 2 fully-connected layers with ReLU activation.
This module also included a function `cal_loss` for calculating loss.

"""

class NeuralNet(nn.Module):
    ''' A simple fully-connected deep neural network '''
    def __init__(self, input_dim):
        super(NeuralNet, self).__init__()

        # Define your neural network here
        # TODO: How to modify this model to achieve better performance?
        # self.net = nn.Sequential(
        #     nn.Linear(input_dim, 64),
        #     nn.ReLU(),
        #     nn.Linear(64, 1)
        # )

        self.net = nn.Sequential(
            nn.Linear(input_dim, 32),
            nn.ReLU(),
            
            nn.Linear(32, 128),
            nn.ReLU(),

            nn.Linear(128, 32),
            nn.ReLU(),

            nn.Linear(32, 1)
        )

        # Mean squared error loss
        self.criterion = nn.MSELoss(reduction='mean')

    def forward(self, x):
        ''' Given input of size (batch_size x input_dim), compute output of the network '''
        return self.net(x).squeeze(1)

    def cal_loss(self, pred, target):
        ''' Calculate loss '''
        # TODO: you may implement L2 regularization here
        return self.criterion(pred, target)

"""# **Train/Dev/Test**

## **Training**
"""

def train(config, device):
    ''' DNN training '''

    n_epochs = config['n_epochs']  # Maximum number of epochs
    model = None
    total_min_mse = 0
    total_loss_record = {}
    for fold in range(10):
        # Setup fold
        tr_set, mean, std = prep_dataloader(tr_path, fold, None, None, 'train', config['batch_size'], n_jobs=0, target_only=target_only)
        dv_set, _, _ = prep_dataloader(tr_path, fold, mean, std, 'dev', config['batch_size'], n_jobs=0, target_only=target_only)
        # Setup model
        model = NeuralNet(tr_set.dataset.dim).to(device)
        # Setup optimizer
        optimizer = getattr(torch.optim, config['optimizer'])(
            model.parameters(), **config['optim_hparas'])
        scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=100, gamma=0.1) # 设置学习率下降
        min_mse = 1000.
        loss_record = {'train': [], 'dev': []}      # for recording training loss
        early_stop_cnt = 0
        epoch = 0
        while epoch < n_epochs:
            model.train()                           # set model to training mode
            for x, y in tr_set:                     # iterate through the dataloader
                optimizer.zero_grad()               # set gradient to zero
                x, y = x.to(device), y.to(device)   # move data to device (cpu/cuda)
                pred = model(x)                     # forward pass (compute output)
                mse_loss = model.cal_loss(pred, y)  # compute loss
                mse_loss.backward()                 # compute gradient (backpropagation)
                optimizer.step()                    # update model with optimizer
                loss_record['train'].append(mse_loss.detach().cpu().item())
            scheduler.step()
            # After each epoch, test your model on the validation (development) set.
            dev_mse = dev(dv_set, model, device)
            if dev_mse < min_mse:
                min_mse = dev_mse
                print('Saving model (epoch = {:4d}, loss = {:.4f})'
                .format(epoch + 1, min_mse))

            epoch += 1
            loss_record['dev'].append(dev_mse)
            # if early_stop_cnt > config['early_stop']:
            #     # Stop training if your model stops improving for "config['early_stop']" epochs.
            #     break
        total_min_mse += min_mse
        print('Finished training after {} epochs in fold {}'.format(epoch, fold + 1))
        del model
        total_loss_record[fold] = loss_record
    loss_record_dev = 0
    for i in range(10):
        loss_record_dev += np.array(total_loss_record[i]['dev'])
    loss_record_dev /= 10
    loss_record_dev = list(loss_record_dev)
    print('Finished training with avg min mse {} at epoch {}'.format(min(loss_record_dev), loss_record_dev.index(min(loss_record_dev))))
    print('Min mse with all: {}'.format(total_min_mse / 10))
    return min_mse, total_loss_record

def train_total(config, device, n_epochs):
    ''' DNN training '''

    # n_epochs = config['n_epochs']  # Maximum number of epochs
    n_epochs = n_epochs
    model = None
    total_min_mse = 0
    tr_set, mean, std = prep_dataloader(tr_path, 0, None, None, 'final', config['batch_size'], n_jobs=0, target_only=target_only)
    # Setup model
    del model
    model = NeuralNet(tr_set.dataset.dim).to(device)
    # Setup optimizer
    optimizer = getattr(torch.optim, config['optimizer'])(
        model.parameters(), **config['optim_hparas'])
    scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=100, gamma=0.1) # 设置学习率下降
    min_mse = 1000.
    loss_record = {'final': []}      # for recording training loss
    early_stop_cnt = 0
    epoch = 0

    while epoch < n_epochs:
        model.train()                           # set model to training mode
        total_mse = 0
        for x, y in tr_set:                     # iterate through the dataloader
            optimizer.zero_grad()               # set gradient to zero
            x, y = x.to(device), y.to(device)   # move data to device (cpu/cuda)
            pred = model(x)                     # forward pass (compute output)
            mse_loss = model.cal_loss(pred, y)  # compute loss
            total_mse += mse_loss.detach().cpu().item() * len(x)
            mse_loss.backward()                 # compute gradient (backpropagation)
            optimizer.step()                    # update model with optimizer
        scheduler.step()
        total_mse /= len(tr_set.dataset)
        if total_mse < min_mse:
            # Save model if your model improved
            min_mse = total_mse
            print('Saving model (epoch = {:4d}, loss = {:.4f})'
                .format(epoch + 1, min_mse))
            torch.save(model.state_dict(), config['save_path'])  # Save model to specified path
            early_stop_cnt = 0
        else:
            early_stop_cnt += 1

        epoch += 1
        loss_record['final'].append(total_mse)
        if early_stop_cnt > config['early_stop']:
            # Stop training if your model stops improving for "config['early_stop']" epochs.
            break
    print('Finished training')
    return min_mse, loss_record

"""## **Validation**"""

def dev(dv_set, model, device):
    model.eval()                                # set model to evalutation mode
    total_loss = 0
    for x, y in dv_set:                         # iterate through the dataloader
        x, y = x.to(device), y.to(device)       # move data to device (cpu/cuda)
        with torch.no_grad():                   # disable gradient calculation
            pred = model(x)                     # forward pass (compute output)
            mse_loss = model.cal_loss(pred, y)  # compute loss
        total_loss += mse_loss.detach().cpu().item() * len(x)  # accumulate loss
    total_loss = total_loss / len(dv_set.dataset)              # compute averaged loss
    return total_loss

"""## **Testing**"""

def test(tt_set, model, device):
    model.eval()                                # set model to evalutation mode
    preds = []
    for x in tt_set:                            # iterate through the dataloader
        x = x.to(device)                        # move data to device (cpu/cuda)
        with torch.no_grad():                   # disable gradient calculation
            pred = model(x)                     # forward pass (compute output)
            preds.append(pred.detach().cpu())   # collect prediction
    preds = torch.cat(preds, dim=0).numpy()     # concatenate all predictions and convert to a numpy array
    return preds

"""# **Setup Hyper-parameters**

`config` contains hyper-parameters for training and the path to save your model.
"""

device = get_device()                 # get the current available device ('cpu' or 'cuda')
os.makedirs('models', exist_ok=True)  # The trained model will be saved to ./models/
target_only = True                   # TODO: Using 40 states & 2 tested_positive features

# TODO: How to tune these hyper-parameters to improve your model's performance?
config = {
    'n_epochs': 1000,                # maximum number of epochs
    'batch_size': 135,               # mini-batch size for dataloader
    'optimizer': 'Adam',              # optimization algorithm (optimizer in torch.optim)
    'optim_hparas': {                # hyper-parameters for the optimizer (depends on which optimizer you are using)
        'lr': 0.001,                 # learning rate of SGD
        # 'momentum': 0.8              # momentum for SGD
    },
    'weight_decay': 1e-5,
    'early_stop': 200,               # early stopping epochs (the number epochs since your model's last improvement)
    'save_path': 'models/model.pth'  # your model will be saved here
}

"""# **Load data and model**"""

_, mean, std = prep_dataloader(tr_path, 0, None, None, 'final', config['batch_size'], n_jobs=0, target_only=target_only)
tt_set, _, _ = prep_dataloader(tt_path, 0, mean, std, 'test', config['batch_size'], n_jobs=0, target_only=target_only)

"""# **Start Training!**"""

model_loss, model_loss_record = train(config, device)

plot_learning_curve_avg(model_loss_record, title='deep model')

# del model
# model = NeuralNet(tt_set.dataset.dim).to(device)
# ckpt = torch.load(config['save_path'], map_location='cpu')  # Load your best model
# model.load_state_dict(ckpt)
# plot_pred(dv_set, model, device)  # Show prediction on the validation set

model_loss, model_loss_record = train_total(config, device, n_epochs=1000)

plot_learning_curve_final(model_loss_record, title='final deep model')

# del model
model = NeuralNet(tt_set.dataset.dim).to(device)
ckpt = torch.load(config['save_path'], map_location='cpu')  # Load your best model
model.load_state_dict(ckpt)

"""# **Testing**
The predictions of your model on testing set will be stored at `pred.csv`.
"""

def save_pred(preds, file):
    ''' Save predictions to specified file '''
    print('Saving results to {}'.format(file))
    with open(file, 'w') as fp:
        writer = csv.writer(fp)
        writer.writerow(['id', 'tested_positive'])
        for i, p in enumerate(preds):
            writer.writerow([i, p])

preds = test(tt_set, model, device)  # predict COVID-19 cases with your model
save_pred(preds, 'pred.csv')         # save prediction file to pred.csv

"""# **Hints**

## **Simple Baseline**
* Run sample code

## **Medium Baseline**
* Feature selection: 40 states + 2 `tested_positive` (`TODO` in dataset)

## **Strong Baseline**
* Feature selection (what other features are useful?)
* DNN architecture (layers? dimension? activation function?)
* Training (mini-batch? optimizer? learning rate?)
* L2 regularization
* There are some mistakes in the sample code, can you find them?

# **Reference**
This code is completely written by Heng-Jui Chang @ NTUEE.  
Copying or reusing this code is required to specify the original author. 

E.g.  
Source: Heng-Jui Chang @ NTUEE (https://github.com/ga642381/ML2021-Spring/blob/main/HW01/HW01.ipynb)
"""

